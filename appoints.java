/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package docreservationsystem;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
public class appoints extends javax.swing.JFrame {

    /**
     * Creates new form appoints
     */
    String n;
    public appoints(String name) {
        n=name;
        initComponents();
        jname.setVisible(false);
        showAppointments(name);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jname = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Appointment Requests");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, -1, -1));

        jname.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jname.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jname, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 60));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 6, 750, 320));

        jButton7.setBackground(new java.awt.Color(0, 102, 102));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Back");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 360, 160, 30));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 790, 440));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
String name=  jname.getText();
new phome(name).setVisible(true);
this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    public void showAppointments(String patientName) {
        DefaultTableModel model = new DefaultTableModel();
           model.addColumn("Appointment Number");
    model.addColumn("Doctor Name");
       model.addColumn("Consultation Date");
    model.addColumn("Consultation Time");
       model.addColumn("Status");
    model.addColumn(" ");
    
        try (Connection con = databaseconnection.getConnection()) {
            // Get the patient ID from the name
            String patientQuery = "SELECT patient_id FROM patient WHERE name = ?";
            PreparedStatement patientStmt = con.prepareStatement(patientQuery);
            patientStmt.setString(1, patientName);

            ResultSet patient = patientStmt.executeQuery();

            if (patient.next()) {
                int patientId = patient.getInt("patient_id");

                // Fetch the appointments
                String appointmentQuery =  "SELECT a.appointment_id, d.name AS doctor_name, a.consultation_date, a.consultation_time, a.status "+
                        "FROM appointment a "+
                        "JOIN doctor d ON a.doctor_id = d.doctor_id "+
                        "WHERE a.patient_id = ? AND (a.status = 'Pending' OR a.status = 'Confirmed')";
                PreparedStatement appointmentStmt = con.prepareStatement(appointmentQuery);
                appointmentStmt.setInt(1, patientId);

                ResultSet appointmentRs = appointmentStmt.executeQuery();
                int appointmentNo = 1; // Start numbering from 1

                while (appointmentRs.next()) {
                    String doctorName = appointmentRs.getString("doctor_name");
                    Date consultationDate = appointmentRs.getDate("consultation_date");
                    Time consultationTime = appointmentRs.getTime("consultation_time");
                    String status = appointmentRs.getString("status");

                    model.addRow(new Object[]{appointmentNo++, doctorName, consultationDate, consultationTime, status, "Make Payment"});
                }
table.setModel(model);
                // Add custom renderer for the "Make Payment" button
                table.getColumnModel().getColumn(5).setCellRenderer(new ButtonRenderer());
                table.getColumnModel().getColumn(5).setCellEditor(new ButtonEditor(new JCheckBox(), model, table));

            } else {
                JOptionPane.showMessageDialog(null, "Patient not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            String status = table.getValueAt(row, 4).toString();
            setText("Make Payment");
            setEnabled("Pending".equals(status)); // Enable only for pending status
            return this;
        }
    }

class ButtonEditor extends DefaultCellEditor {
    private JButton button;
    private String label;
    private boolean isClicked;
    private DefaultTableModel model;
    private JTable table;

    public ButtonEditor(JCheckBox checkBox, DefaultTableModel model, JTable table) {
        super(checkBox);
        this.model = model;
        this.table = table;
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int row = table.getSelectedRow();
                int appointmentNo = (int) table.getValueAt(row, 0); // Get the appointment number

                // Get the doctor's name from the table based on the selected row (column index 1 contains doctor name)
                String doctorName = (String) table.getValueAt(row, 1); 

                // Show confirmation dialog
                int option = JOptionPane.showConfirmDialog(table, 
                        "Do you want to make an online payment?", 
                        "Payment Confirmation", 
                        JOptionPane.YES_NO_OPTION);

                if (option == JOptionPane.YES_OPTION) {
                    // If user selects YES, navigate to the payment page with doctor name as parameter
                    new payment(n,doctorName).setVisible(true);
                } else {
                    // If user selects NO, navigate back to the phone page
                    new phome(n).setVisible(true);
                }
            }
        });
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isClicked = true;
        return button;
    }
}


    public static void main(String args[]) {
     
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jname;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
